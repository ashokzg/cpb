"""autogenerated by genpy from billiards_msgs/PlanShotAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import billiards_msgs.msg
import geometry_msgs.msg
import genpy
import actionlib_msgs.msg
import std_msgs.msg

class PlanShotAction(genpy.Message):
  _md5sum = "a5587c9b771a0b1bb1053fdbf5f42aa5"
  _type = "billiards_msgs/PlanShotAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

PlanShotActionGoal action_goal
PlanShotActionResult action_result
PlanShotActionFeedback action_feedback

================================================================================
MSG: billiards_msgs/PlanShotActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
PlanShotGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: billiards_msgs/PlanShotGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
TableState state
float32 angle_min # in radians
float32 angle_max # in radians

================================================================================
MSG: billiards_msgs/TableState
BallState[] balls

================================================================================
MSG: billiards_msgs/BallState
int8                  id                  # id of the ball
                                          # 0-cue ball, 1-15 for each of the 15 balls
bool                  pocketed            # false if ball is on the table
geometry_msgs/PointStamped   point        # location of each ball
int8                  group_id            # if we want to group the ball

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: billiards_msgs/PlanShotActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
PlanShotResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: billiards_msgs/PlanShotResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
ShotPlan shot

================================================================================
MSG: billiards_msgs/ShotPlan
# describes plan for a single shot
BallState ball
geometry_msgs/PoseStamped base_pose                     # where PR2 should "stand"
geometry_msgs/PoseStamped bridge_pose                   # where to put the bridge
                                                        # orientation is: x-forward (towards cue ball)
                                                        #                 z-(up)
                                                        #                 y-robot left
float64                   velocity                      # not used for now


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: billiards_msgs/PlanShotActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
PlanShotFeedback feedback

================================================================================
MSG: billiards_msgs/PlanShotFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['billiards_msgs/PlanShotActionGoal','billiards_msgs/PlanShotActionResult','billiards_msgs/PlanShotActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanShotAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = billiards_msgs.msg.PlanShotActionGoal()
      if self.action_result is None:
        self.action_result = billiards_msgs.msg.PlanShotActionResult()
      if self.action_feedback is None:
        self.action_feedback = billiards_msgs.msg.PlanShotActionFeedback()
    else:
      self.action_goal = billiards_msgs.msg.PlanShotActionGoal()
      self.action_result = billiards_msgs.msg.PlanShotActionResult()
      self.action_feedback = billiards_msgs.msg.PlanShotActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.state.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.state.balls:
        _x = val1
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v1 = val1.point
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.point
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(val1.group_id))
      _x = self
      buff.write(_struct_2f3I.pack(_x.action_goal.goal.angle_min, _x.action_goal.goal.angle_max, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bB3I.pack(_x.action_result.result.shot.ball.id, _x.action_result.result.shot.ball.pocketed, _x.action_result.result.shot.ball.point.header.seq, _x.action_result.result.shot.ball.point.header.stamp.secs, _x.action_result.result.shot.ball.point.header.stamp.nsecs))
      _x = self.action_result.result.shot.ball.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3db3I.pack(_x.action_result.result.shot.ball.point.point.x, _x.action_result.result.shot.ball.point.point.y, _x.action_result.result.shot.ball.point.point.z, _x.action_result.result.shot.ball.group_id, _x.action_result.result.shot.base_pose.header.seq, _x.action_result.result.shot.base_pose.header.stamp.secs, _x.action_result.result.shot.base_pose.header.stamp.nsecs))
      _x = self.action_result.result.shot.base_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_result.result.shot.base_pose.pose.position.x, _x.action_result.result.shot.base_pose.pose.position.y, _x.action_result.result.shot.base_pose.pose.position.z, _x.action_result.result.shot.base_pose.pose.orientation.x, _x.action_result.result.shot.base_pose.pose.orientation.y, _x.action_result.result.shot.base_pose.pose.orientation.z, _x.action_result.result.shot.base_pose.pose.orientation.w, _x.action_result.result.shot.bridge_pose.header.seq, _x.action_result.result.shot.bridge_pose.header.stamp.secs, _x.action_result.result.shot.bridge_pose.header.stamp.nsecs))
      _x = self.action_result.result.shot.bridge_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d3I.pack(_x.action_result.result.shot.bridge_pose.pose.position.x, _x.action_result.result.shot.bridge_pose.pose.position.y, _x.action_result.result.shot.bridge_pose.pose.position.z, _x.action_result.result.shot.bridge_pose.pose.orientation.x, _x.action_result.result.shot.bridge_pose.pose.orientation.y, _x.action_result.result.shot.bridge_pose.pose.orientation.z, _x.action_result.result.shot.bridge_pose.pose.orientation.w, _x.action_result.result.shot.velocity, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = billiards_msgs.msg.PlanShotActionGoal()
      if self.action_result is None:
        self.action_result = billiards_msgs.msg.PlanShotActionResult()
      if self.action_feedback is None:
        self.action_feedback = billiards_msgs.msg.PlanShotActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.state.balls = []
      for i in range(0, length):
        val1 = billiards_msgs.msg.BallState()
        _x = val1
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        val1.pocketed = bool(val1.pocketed)
        _v5 = val1.point
        _v6 = _v5.header
        start = end
        end += 4
        (_v6.seq,) = _struct_I.unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8')
        else:
          _v6.frame_id = str[start:end]
        _v8 = _v5.point
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (val1.group_id,) = _struct_b.unpack(str[start:end])
        self.action_goal.goal.state.balls.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.angle_min, _x.action_goal.goal.angle_max, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.action_result.result.shot.ball.id, _x.action_result.result.shot.ball.pocketed, _x.action_result.result.shot.ball.point.header.seq, _x.action_result.result.shot.ball.point.header.stamp.secs, _x.action_result.result.shot.ball.point.header.stamp.nsecs,) = _struct_bB3I.unpack(str[start:end])
      self.action_result.result.shot.ball.pocketed = bool(self.action_result.result.shot.ball.pocketed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.shot.ball.point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.shot.ball.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.action_result.result.shot.ball.point.point.x, _x.action_result.result.shot.ball.point.point.y, _x.action_result.result.shot.ball.point.point.z, _x.action_result.result.shot.ball.group_id, _x.action_result.result.shot.base_pose.header.seq, _x.action_result.result.shot.base_pose.header.stamp.secs, _x.action_result.result.shot.base_pose.header.stamp.nsecs,) = _struct_3db3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.shot.base_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.shot.base_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.shot.base_pose.pose.position.x, _x.action_result.result.shot.base_pose.pose.position.y, _x.action_result.result.shot.base_pose.pose.position.z, _x.action_result.result.shot.base_pose.pose.orientation.x, _x.action_result.result.shot.base_pose.pose.orientation.y, _x.action_result.result.shot.base_pose.pose.orientation.z, _x.action_result.result.shot.base_pose.pose.orientation.w, _x.action_result.result.shot.bridge_pose.header.seq, _x.action_result.result.shot.bridge_pose.header.stamp.secs, _x.action_result.result.shot.bridge_pose.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.shot.bridge_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.shot.bridge_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.action_result.result.shot.bridge_pose.pose.position.x, _x.action_result.result.shot.bridge_pose.pose.position.y, _x.action_result.result.shot.bridge_pose.pose.position.z, _x.action_result.result.shot.bridge_pose.pose.orientation.x, _x.action_result.result.shot.bridge_pose.pose.orientation.y, _x.action_result.result.shot.bridge_pose.pose.orientation.z, _x.action_result.result.shot.bridge_pose.pose.orientation.w, _x.action_result.result.shot.velocity, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_8d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.state.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.state.balls:
        _x = val1
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v9 = val1.point
        _v10 = _v9.header
        buff.write(_struct_I.pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v12 = _v9.point
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(val1.group_id))
      _x = self
      buff.write(_struct_2f3I.pack(_x.action_goal.goal.angle_min, _x.action_goal.goal.angle_max, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bB3I.pack(_x.action_result.result.shot.ball.id, _x.action_result.result.shot.ball.pocketed, _x.action_result.result.shot.ball.point.header.seq, _x.action_result.result.shot.ball.point.header.stamp.secs, _x.action_result.result.shot.ball.point.header.stamp.nsecs))
      _x = self.action_result.result.shot.ball.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3db3I.pack(_x.action_result.result.shot.ball.point.point.x, _x.action_result.result.shot.ball.point.point.y, _x.action_result.result.shot.ball.point.point.z, _x.action_result.result.shot.ball.group_id, _x.action_result.result.shot.base_pose.header.seq, _x.action_result.result.shot.base_pose.header.stamp.secs, _x.action_result.result.shot.base_pose.header.stamp.nsecs))
      _x = self.action_result.result.shot.base_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_result.result.shot.base_pose.pose.position.x, _x.action_result.result.shot.base_pose.pose.position.y, _x.action_result.result.shot.base_pose.pose.position.z, _x.action_result.result.shot.base_pose.pose.orientation.x, _x.action_result.result.shot.base_pose.pose.orientation.y, _x.action_result.result.shot.base_pose.pose.orientation.z, _x.action_result.result.shot.base_pose.pose.orientation.w, _x.action_result.result.shot.bridge_pose.header.seq, _x.action_result.result.shot.bridge_pose.header.stamp.secs, _x.action_result.result.shot.bridge_pose.header.stamp.nsecs))
      _x = self.action_result.result.shot.bridge_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d3I.pack(_x.action_result.result.shot.bridge_pose.pose.position.x, _x.action_result.result.shot.bridge_pose.pose.position.y, _x.action_result.result.shot.bridge_pose.pose.position.z, _x.action_result.result.shot.bridge_pose.pose.orientation.x, _x.action_result.result.shot.bridge_pose.pose.orientation.y, _x.action_result.result.shot.bridge_pose.pose.orientation.z, _x.action_result.result.shot.bridge_pose.pose.orientation.w, _x.action_result.result.shot.velocity, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = billiards_msgs.msg.PlanShotActionGoal()
      if self.action_result is None:
        self.action_result = billiards_msgs.msg.PlanShotActionResult()
      if self.action_feedback is None:
        self.action_feedback = billiards_msgs.msg.PlanShotActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.state.balls = []
      for i in range(0, length):
        val1 = billiards_msgs.msg.BallState()
        _x = val1
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        val1.pocketed = bool(val1.pocketed)
        _v13 = val1.point
        _v14 = _v13.header
        start = end
        end += 4
        (_v14.seq,) = _struct_I.unpack(str[start:end])
        _v15 = _v14.stamp
        _x = _v15
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.frame_id = str[start:end].decode('utf-8')
        else:
          _v14.frame_id = str[start:end]
        _v16 = _v13.point
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (val1.group_id,) = _struct_b.unpack(str[start:end])
        self.action_goal.goal.state.balls.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.angle_min, _x.action_goal.goal.angle_max, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.action_result.result.shot.ball.id, _x.action_result.result.shot.ball.pocketed, _x.action_result.result.shot.ball.point.header.seq, _x.action_result.result.shot.ball.point.header.stamp.secs, _x.action_result.result.shot.ball.point.header.stamp.nsecs,) = _struct_bB3I.unpack(str[start:end])
      self.action_result.result.shot.ball.pocketed = bool(self.action_result.result.shot.ball.pocketed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.shot.ball.point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.shot.ball.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.action_result.result.shot.ball.point.point.x, _x.action_result.result.shot.ball.point.point.y, _x.action_result.result.shot.ball.point.point.z, _x.action_result.result.shot.ball.group_id, _x.action_result.result.shot.base_pose.header.seq, _x.action_result.result.shot.base_pose.header.stamp.secs, _x.action_result.result.shot.base_pose.header.stamp.nsecs,) = _struct_3db3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.shot.base_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.shot.base_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.shot.base_pose.pose.position.x, _x.action_result.result.shot.base_pose.pose.position.y, _x.action_result.result.shot.base_pose.pose.position.z, _x.action_result.result.shot.base_pose.pose.orientation.x, _x.action_result.result.shot.base_pose.pose.orientation.y, _x.action_result.result.shot.base_pose.pose.orientation.z, _x.action_result.result.shot.base_pose.pose.orientation.w, _x.action_result.result.shot.bridge_pose.header.seq, _x.action_result.result.shot.bridge_pose.header.stamp.secs, _x.action_result.result.shot.bridge_pose.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.shot.bridge_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.shot.bridge_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.action_result.result.shot.bridge_pose.pose.position.x, _x.action_result.result.shot.bridge_pose.pose.position.y, _x.action_result.result.shot.bridge_pose.pose.position.z, _x.action_result.result.shot.bridge_pose.pose.orientation.x, _x.action_result.result.shot.bridge_pose.pose.orientation.y, _x.action_result.result.shot.bridge_pose.pose.orientation.z, _x.action_result.result.shot.bridge_pose.pose.orientation.w, _x.action_result.result.shot.velocity, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_8d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8d3I = struct.Struct("<8d3I")
_struct_b = struct.Struct("<b")
_struct_2f3I = struct.Struct("<2f3I")
_struct_bB = struct.Struct("<bB")
_struct_7d3I = struct.Struct("<7d3I")
_struct_bB3I = struct.Struct("<bB3I")
_struct_3db3I = struct.Struct("<3db3I")
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
