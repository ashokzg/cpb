"""autogenerated by genpy from fastfiz_msgs/Event.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import billiards_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class Event(genpy.Message):
  _md5sum = "dc315df2bb491329dab45557e8a0ed50"
  _type = "fastfiz_msgs/Event"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 NO_EVENT = 0
uint8 STATE_CHANGE = 1
uint8 BALL_COLLISION = 2
uint8 RAIL_COLLISION = 3
uint8 POCKETED = 4
uint8 CUE_STRIKE = 5
uint8 MISCUE = 6
uint8 UNKNOWN_EVENT = 7

uint8 type

billiards_msgs/BallState ball1
billiards_msgs/BallState ball2

string string_rep


================================================================================
MSG: billiards_msgs/BallState
int8                  id                  # id of the ball
                                          # 0-cue ball, 1-15 for each of the 15 balls
bool                  pocketed            # false if ball is on the table
geometry_msgs/PointStamped   point        # location of each ball
int8                  group_id            # if we want to group the ball

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  # Pseudo-constants
  NO_EVENT = 0
  STATE_CHANGE = 1
  BALL_COLLISION = 2
  RAIL_COLLISION = 3
  POCKETED = 4
  CUE_STRIKE = 5
  MISCUE = 6
  UNKNOWN_EVENT = 7

  __slots__ = ['type','ball1','ball2','string_rep']
  _slot_types = ['uint8','billiards_msgs/BallState','billiards_msgs/BallState','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,ball1,ball2,string_rep

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Event, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.ball1 is None:
        self.ball1 = billiards_msgs.msg.BallState()
      if self.ball2 is None:
        self.ball2 = billiards_msgs.msg.BallState()
      if self.string_rep is None:
        self.string_rep = ''
    else:
      self.type = 0
      self.ball1 = billiards_msgs.msg.BallState()
      self.ball2 = billiards_msgs.msg.BallState()
      self.string_rep = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BbB3I.pack(_x.type, _x.ball1.id, _x.ball1.pocketed, _x.ball1.point.header.seq, _x.ball1.point.header.stamp.secs, _x.ball1.point.header.stamp.nsecs))
      _x = self.ball1.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2bB3I.pack(_x.ball1.point.point.x, _x.ball1.point.point.y, _x.ball1.point.point.z, _x.ball1.group_id, _x.ball2.id, _x.ball2.pocketed, _x.ball2.point.header.seq, _x.ball2.point.header.stamp.secs, _x.ball2.point.header.stamp.nsecs))
      _x = self.ball2.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3db.pack(_x.ball2.point.point.x, _x.ball2.point.point.y, _x.ball2.point.point.z, _x.ball2.group_id))
      _x = self.string_rep
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ball1 is None:
        self.ball1 = billiards_msgs.msg.BallState()
      if self.ball2 is None:
        self.ball2 = billiards_msgs.msg.BallState()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.type, _x.ball1.id, _x.ball1.pocketed, _x.ball1.point.header.seq, _x.ball1.point.header.stamp.secs, _x.ball1.point.header.stamp.nsecs,) = _struct_BbB3I.unpack(str[start:end])
      self.ball1.pocketed = bool(self.ball1.pocketed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ball1.point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ball1.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 39
      (_x.ball1.point.point.x, _x.ball1.point.point.y, _x.ball1.point.point.z, _x.ball1.group_id, _x.ball2.id, _x.ball2.pocketed, _x.ball2.point.header.seq, _x.ball2.point.header.stamp.secs, _x.ball2.point.header.stamp.nsecs,) = _struct_3d2bB3I.unpack(str[start:end])
      self.ball2.pocketed = bool(self.ball2.pocketed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ball2.point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ball2.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.ball2.point.point.x, _x.ball2.point.point.y, _x.ball2.point.point.z, _x.ball2.group_id,) = _struct_3db.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.string_rep = str[start:end].decode('utf-8')
      else:
        self.string_rep = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BbB3I.pack(_x.type, _x.ball1.id, _x.ball1.pocketed, _x.ball1.point.header.seq, _x.ball1.point.header.stamp.secs, _x.ball1.point.header.stamp.nsecs))
      _x = self.ball1.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2bB3I.pack(_x.ball1.point.point.x, _x.ball1.point.point.y, _x.ball1.point.point.z, _x.ball1.group_id, _x.ball2.id, _x.ball2.pocketed, _x.ball2.point.header.seq, _x.ball2.point.header.stamp.secs, _x.ball2.point.header.stamp.nsecs))
      _x = self.ball2.point.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3db.pack(_x.ball2.point.point.x, _x.ball2.point.point.y, _x.ball2.point.point.z, _x.ball2.group_id))
      _x = self.string_rep
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ball1 is None:
        self.ball1 = billiards_msgs.msg.BallState()
      if self.ball2 is None:
        self.ball2 = billiards_msgs.msg.BallState()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.type, _x.ball1.id, _x.ball1.pocketed, _x.ball1.point.header.seq, _x.ball1.point.header.stamp.secs, _x.ball1.point.header.stamp.nsecs,) = _struct_BbB3I.unpack(str[start:end])
      self.ball1.pocketed = bool(self.ball1.pocketed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ball1.point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ball1.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 39
      (_x.ball1.point.point.x, _x.ball1.point.point.y, _x.ball1.point.point.z, _x.ball1.group_id, _x.ball2.id, _x.ball2.pocketed, _x.ball2.point.header.seq, _x.ball2.point.header.stamp.secs, _x.ball2.point.header.stamp.nsecs,) = _struct_3d2bB3I.unpack(str[start:end])
      self.ball2.pocketed = bool(self.ball2.pocketed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ball2.point.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ball2.point.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.ball2.point.point.x, _x.ball2.point.point.y, _x.ball2.point.point.z, _x.ball2.group_id,) = _struct_3db.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.string_rep = str[start:end].decode('utf-8')
      else:
        self.string_rep = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d2bB3I = struct.Struct("<3d2bB3I")
_struct_3db = struct.Struct("<3db")
_struct_BbB3I = struct.Struct("<BbB3I")
