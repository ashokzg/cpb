"""autogenerated by genpy from fastfiz_msgs/SimulateShotRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fastfiz_msgs.msg
import billiards_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class SimulateShotRequest(genpy.Message):
  _md5sum = "57691228e79ee18d9060a3cc1d2c8baf"
  _type = "fastfiz_msgs/SimulateShotRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """billiards_msgs/TableState state
ShotParams shot

================================================================================
MSG: billiards_msgs/TableState
BallState[] balls

================================================================================
MSG: billiards_msgs/BallState
int8                  id                  # id of the ball
                                          # 0-cue ball, 1-15 for each of the 15 balls
bool                  pocketed            # false if ball is on the table
geometry_msgs/PointStamped   point        # location of each ball
int8                  group_id            # if we want to group the ball

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: fastfiz_msgs/ShotParams
float64 a     # The x-coordinate of the cue stick (right/left english) on the CUE ball in mm. 
float64 b     # The y-coordinate of the cue stick (top/bottom english) on the CUE ball in mm. 
float64 theta # The elevation of the cue stick in degrees. 
float64 phi   # The azumith angle (heading) of the cue stick in degrees. 
float64 v     # The velocity of the cue stick before impact in m/s (max is 4.5 m/s). 
"""
  __slots__ = ['state','shot']
  _slot_types = ['billiards_msgs/TableState','fastfiz_msgs/ShotParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,shot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimulateShotRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = billiards_msgs.msg.TableState()
      if self.shot is None:
        self.shot = fastfiz_msgs.msg.ShotParams()
    else:
      self.state = billiards_msgs.msg.TableState()
      self.shot = fastfiz_msgs.msg.ShotParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.state.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.balls:
        _x = val1
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v1 = val1.point
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.point
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(val1.group_id))
      _x = self
      buff.write(_struct_5d.pack(_x.shot.a, _x.shot.b, _x.shot.theta, _x.shot.phi, _x.shot.v))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = billiards_msgs.msg.TableState()
      if self.shot is None:
        self.shot = fastfiz_msgs.msg.ShotParams()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.balls = []
      for i in range(0, length):
        val1 = billiards_msgs.msg.BallState()
        _x = val1
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        val1.pocketed = bool(val1.pocketed)
        _v5 = val1.point
        _v6 = _v5.header
        start = end
        end += 4
        (_v6.seq,) = _struct_I.unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8')
        else:
          _v6.frame_id = str[start:end]
        _v8 = _v5.point
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (val1.group_id,) = _struct_b.unpack(str[start:end])
        self.state.balls.append(val1)
      _x = self
      start = end
      end += 40
      (_x.shot.a, _x.shot.b, _x.shot.theta, _x.shot.phi, _x.shot.v,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.state.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.balls:
        _x = val1
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v9 = val1.point
        _v10 = _v9.header
        buff.write(_struct_I.pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v12 = _v9.point
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(val1.group_id))
      _x = self
      buff.write(_struct_5d.pack(_x.shot.a, _x.shot.b, _x.shot.theta, _x.shot.phi, _x.shot.v))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = billiards_msgs.msg.TableState()
      if self.shot is None:
        self.shot = fastfiz_msgs.msg.ShotParams()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.balls = []
      for i in range(0, length):
        val1 = billiards_msgs.msg.BallState()
        _x = val1
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        val1.pocketed = bool(val1.pocketed)
        _v13 = val1.point
        _v14 = _v13.header
        start = end
        end += 4
        (_v14.seq,) = _struct_I.unpack(str[start:end])
        _v15 = _v14.stamp
        _x = _v15
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.frame_id = str[start:end].decode('utf-8')
        else:
          _v14.frame_id = str[start:end]
        _v16 = _v13.point
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (val1.group_id,) = _struct_b.unpack(str[start:end])
        self.state.balls.append(val1)
      _x = self
      start = end
      end += 40
      (_x.shot.a, _x.shot.b, _x.shot.theta, _x.shot.phi, _x.shot.v,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_bB = struct.Struct("<bB")
_struct_5d = struct.Struct("<5d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from fastfiz_msgs/SimulateShotResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fastfiz_msgs.msg
import billiards_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class SimulateShotResponse(genpy.Message):
  _md5sum = "95ea3d0d27b0dd9de5c769873a657651"
  _type = "fastfiz_msgs/SimulateShotResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """billiards_msgs/TableState state
Event[] events

================================================================================
MSG: billiards_msgs/TableState
BallState[] balls

================================================================================
MSG: billiards_msgs/BallState
int8                  id                  # id of the ball
                                          # 0-cue ball, 1-15 for each of the 15 balls
bool                  pocketed            # false if ball is on the table
geometry_msgs/PointStamped   point        # location of each ball
int8                  group_id            # if we want to group the ball

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: fastfiz_msgs/Event
uint8 NO_EVENT = 0
uint8 STATE_CHANGE = 1
uint8 BALL_COLLISION = 2
uint8 RAIL_COLLISION = 3
uint8 POCKETED = 4
uint8 CUE_STRIKE = 5
uint8 MISCUE = 6
uint8 UNKNOWN_EVENT = 7

uint8 type

billiards_msgs/BallState ball1
billiards_msgs/BallState ball2

string string_rep


"""
  __slots__ = ['state','events']
  _slot_types = ['billiards_msgs/TableState','fastfiz_msgs/Event[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,events

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimulateShotResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = billiards_msgs.msg.TableState()
      if self.events is None:
        self.events = []
    else:
      self.state = billiards_msgs.msg.TableState()
      self.events = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.state.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.balls:
        _x = val1
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v17 = val1.point
        _v18 = _v17.header
        buff.write(_struct_I.pack(_v18.seq))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v20 = _v17.point
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(val1.group_id))
      length = len(self.events)
      buff.write(_struct_I.pack(length))
      for val1 in self.events:
        buff.write(_struct_B.pack(val1.type))
        _v21 = val1.ball1
        _x = _v21
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v22 = _v21.point
        _v23 = _v22.header
        buff.write(_struct_I.pack(_v23.seq))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v25 = _v22.point
        _x = _v25
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(_v21.group_id))
        _v26 = val1.ball2
        _x = _v26
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v27 = _v26.point
        _v28 = _v27.header
        buff.write(_struct_I.pack(_v28.seq))
        _v29 = _v28.stamp
        _x = _v29
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v28.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v30 = _v27.point
        _x = _v30
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(_v26.group_id))
        _x = val1.string_rep
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = billiards_msgs.msg.TableState()
      if self.events is None:
        self.events = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.balls = []
      for i in range(0, length):
        val1 = billiards_msgs.msg.BallState()
        _x = val1
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        val1.pocketed = bool(val1.pocketed)
        _v31 = val1.point
        _v32 = _v31.header
        start = end
        end += 4
        (_v32.seq,) = _struct_I.unpack(str[start:end])
        _v33 = _v32.stamp
        _x = _v33
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_id = str[start:end].decode('utf-8')
        else:
          _v32.frame_id = str[start:end]
        _v34 = _v31.point
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (val1.group_id,) = _struct_b.unpack(str[start:end])
        self.state.balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.events = []
      for i in range(0, length):
        val1 = fastfiz_msgs.msg.Event()
        start = end
        end += 1
        (val1.type,) = _struct_B.unpack(str[start:end])
        _v35 = val1.ball1
        _x = _v35
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        _v35.pocketed = bool(_v35.pocketed)
        _v36 = _v35.point
        _v37 = _v36.header
        start = end
        end += 4
        (_v37.seq,) = _struct_I.unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8')
        else:
          _v37.frame_id = str[start:end]
        _v39 = _v36.point
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (_v35.group_id,) = _struct_b.unpack(str[start:end])
        _v40 = val1.ball2
        _x = _v40
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        _v40.pocketed = bool(_v40.pocketed)
        _v41 = _v40.point
        _v42 = _v41.header
        start = end
        end += 4
        (_v42.seq,) = _struct_I.unpack(str[start:end])
        _v43 = _v42.stamp
        _x = _v43
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v42.frame_id = str[start:end].decode('utf-8')
        else:
          _v42.frame_id = str[start:end]
        _v44 = _v41.point
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (_v40.group_id,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.string_rep = str[start:end].decode('utf-8')
        else:
          val1.string_rep = str[start:end]
        self.events.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.state.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.state.balls:
        _x = val1
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v45 = val1.point
        _v46 = _v45.header
        buff.write(_struct_I.pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v48 = _v45.point
        _x = _v48
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(val1.group_id))
      length = len(self.events)
      buff.write(_struct_I.pack(length))
      for val1 in self.events:
        buff.write(_struct_B.pack(val1.type))
        _v49 = val1.ball1
        _x = _v49
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v50 = _v49.point
        _v51 = _v50.header
        buff.write(_struct_I.pack(_v51.seq))
        _v52 = _v51.stamp
        _x = _v52
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v51.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v53 = _v50.point
        _x = _v53
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(_v49.group_id))
        _v54 = val1.ball2
        _x = _v54
        buff.write(_struct_bB.pack(_x.id, _x.pocketed))
        _v55 = _v54.point
        _v56 = _v55.header
        buff.write(_struct_I.pack(_v56.seq))
        _v57 = _v56.stamp
        _x = _v57
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v56.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v58 = _v55.point
        _x = _v58
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_b.pack(_v54.group_id))
        _x = val1.string_rep
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = billiards_msgs.msg.TableState()
      if self.events is None:
        self.events = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.state.balls = []
      for i in range(0, length):
        val1 = billiards_msgs.msg.BallState()
        _x = val1
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        val1.pocketed = bool(val1.pocketed)
        _v59 = val1.point
        _v60 = _v59.header
        start = end
        end += 4
        (_v60.seq,) = _struct_I.unpack(str[start:end])
        _v61 = _v60.stamp
        _x = _v61
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v60.frame_id = str[start:end].decode('utf-8')
        else:
          _v60.frame_id = str[start:end]
        _v62 = _v59.point
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (val1.group_id,) = _struct_b.unpack(str[start:end])
        self.state.balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.events = []
      for i in range(0, length):
        val1 = fastfiz_msgs.msg.Event()
        start = end
        end += 1
        (val1.type,) = _struct_B.unpack(str[start:end])
        _v63 = val1.ball1
        _x = _v63
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        _v63.pocketed = bool(_v63.pocketed)
        _v64 = _v63.point
        _v65 = _v64.header
        start = end
        end += 4
        (_v65.seq,) = _struct_I.unpack(str[start:end])
        _v66 = _v65.stamp
        _x = _v66
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v65.frame_id = str[start:end].decode('utf-8')
        else:
          _v65.frame_id = str[start:end]
        _v67 = _v64.point
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (_v63.group_id,) = _struct_b.unpack(str[start:end])
        _v68 = val1.ball2
        _x = _v68
        start = end
        end += 2
        (_x.id, _x.pocketed,) = _struct_bB.unpack(str[start:end])
        _v68.pocketed = bool(_v68.pocketed)
        _v69 = _v68.point
        _v70 = _v69.header
        start = end
        end += 4
        (_v70.seq,) = _struct_I.unpack(str[start:end])
        _v71 = _v70.stamp
        _x = _v71
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v70.frame_id = str[start:end].decode('utf-8')
        else:
          _v70.frame_id = str[start:end]
        _v72 = _v69.point
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 1
        (_v68.group_id,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.string_rep = str[start:end].decode('utf-8')
        else:
          val1.string_rep = str[start:end]
        self.events.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_bB = struct.Struct("<bB")
_struct_b = struct.Struct("<b")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
class SimulateShot(object):
  _type          = 'fastfiz_msgs/SimulateShot'
  _md5sum = 'fa1efda9acdc73b5f88a0d0985d85697'
  _request_class  = SimulateShotRequest
  _response_class = SimulateShotResponse
