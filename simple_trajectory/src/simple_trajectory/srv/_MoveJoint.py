"""autogenerated by genpy from simple_trajectory/MoveJointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveJointRequest(genpy.Message):
  _md5sum = "f221361dd49c323d76c5fc385eb489a3"
  _type = "simple_trajectory/MoveJointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool arm









uint32 jointIdx


float64 movAngle


float64 movVel

"""
  __slots__ = ['arm','jointIdx','movAngle','movVel']
  _slot_types = ['bool','uint32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       arm,jointIdx,movAngle,movVel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveJointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.arm is None:
        self.arm = False
      if self.jointIdx is None:
        self.jointIdx = 0
      if self.movAngle is None:
        self.movAngle = 0.
      if self.movVel is None:
        self.movVel = 0.
    else:
      self.arm = False
      self.jointIdx = 0
      self.movAngle = 0.
      self.movVel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI2d.pack(_x.arm, _x.jointIdx, _x.movAngle, _x.movVel))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.arm, _x.jointIdx, _x.movAngle, _x.movVel,) = _struct_BI2d.unpack(str[start:end])
      self.arm = bool(self.arm)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI2d.pack(_x.arm, _x.jointIdx, _x.movAngle, _x.movVel))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.arm, _x.jointIdx, _x.movAngle, _x.movVel,) = _struct_BI2d.unpack(str[start:end])
      self.arm = bool(self.arm)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI2d = struct.Struct("<BI2d")
"""autogenerated by genpy from simple_trajectory/MoveJointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveJointResponse(genpy.Message):
  _md5sum = "30098c4ab04d1a90fd8d669a0aa54fbe"
  _type = "simple_trajectory/MoveJointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64[] curPosition


"""
  __slots__ = ['curPosition']
  _slot_types = ['float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       curPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveJointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.curPosition is None:
        self.curPosition = []
    else:
      self.curPosition = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.curPosition)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.curPosition))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.curPosition = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.curPosition)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.curPosition.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.curPosition = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class MoveJoint(object):
  _type          = 'simple_trajectory/MoveJoint'
  _md5sum = '00d66702088277ca01892acf41382697'
  _request_class  = MoveJointRequest
  _response_class = MoveJointResponse
